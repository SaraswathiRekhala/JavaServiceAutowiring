/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.javaserviceautowiring.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import com.javaserviceautowiring.dbscenarios.models.procedure.*;

@Service
public class DbscenariosProcedureExecutorServiceImpl implements DbscenariosProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbscenariosProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("dbscenariosWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureInsertAndGetQueryResponse executeProcedure_InsertAndGetQuery(ProcedureInsertAndGetQueryRequest procedureInsertAndGetQueryRequest) {
        Map params = new HashMap(18);

        params.put("BYTECOL", procedureInsertAndGetQueryRequest.getBytecol());
        params.put("SHORTCOL", procedureInsertAndGetQueryRequest.getShortcol());
        params.put("INTCOL", procedureInsertAndGetQueryRequest.getIntcol());
        params.put("LONGCOL", procedureInsertAndGetQueryRequest.getLongcol());
        params.put("FLOATCOL", procedureInsertAndGetQueryRequest.getFloatcol());
        params.put("DOUBLECOL", procedureInsertAndGetQueryRequest.getDoublecol());
        params.put("BIGDECCOL", procedureInsertAndGetQueryRequest.getBigdeccol());
        params.put("BIGINTCOL", procedureInsertAndGetQueryRequest.getBigintcol());
        params.put("CHARCOL", procedureInsertAndGetQueryRequest.getCharcol());
        params.put("STRINGCOL", procedureInsertAndGetQueryRequest.getStringcol());
        params.put("CLOBCOL", procedureInsertAndGetQueryRequest.getClobcol());
        params.put("TEXTCOL", procedureInsertAndGetQueryRequest.getTextcol());
        params.put("DATECOL", procedureInsertAndGetQueryRequest.getDatecol());
        params.put("TIMECOL", procedureInsertAndGetQueryRequest.getTimecol());
        params.put("DATETIMECOL", procedureInsertAndGetQueryRequest.getDatetimecol());
        params.put("TIMESTAMPCOL", procedureInsertAndGetQueryRequest.getTimestampcol());
        params.put("BOOLEANCOL", procedureInsertAndGetQueryRequest.getBooleancol());
        params.put("BLOBCOL", procedureInsertAndGetQueryRequest.getBlobcol());

        return procedureExecutor.executeNamedProcedure("Procedure_InsertAndGetQuery", params, ProcedureInsertAndGetQueryResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Void executeProcedure_SingleBlobInsert(ProcedureSingleBlobInsertRequest procedureSingleBlobInsertRequest) {
        Map params = new HashMap(1);

        params.put("BLOBCOL", procedureSingleBlobInsertRequest.getBlobcol());

        return procedureExecutor.executeNamedProcedure("Procedure_SingleBlobInsert", params, Void.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureGetAllTypesWithAliasesInsertQueryResponse executeProcedure_getAllTypesWithAliases_InsertQuery(ProcedureGetAllTypesWithAliasesInsertQueryRequest procedureGetAllTypesWithAliasesInsertQueryRequest) {
        Map params = new HashMap(18);

        params.put("BYTECOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getBytecol());
        params.put("SHORTCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getShortcol());
        params.put("INTCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getIntcol());
        params.put("LONGCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getLongcol());
        params.put("FLOATCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getFloatcol());
        params.put("DOUBLECOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getDoublecol());
        params.put("BIGDECCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getBigdeccol());
        params.put("BIGINTCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getBigintcol());
        params.put("CHARCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getCharcol());
        params.put("STRINGCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getStringcol());
        params.put("CLOBCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getClobcol());
        params.put("TEXTCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getTextcol());
        params.put("DATECOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getDatecol());
        params.put("TIMECOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getTimecol());
        params.put("DATETIMECOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getDatetimecol());
        params.put("TIMESTAMPCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getTimestampcol());
        params.put("BOOLEANCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getBooleancol());
        params.put("BLOBCOL", procedureGetAllTypesWithAliasesInsertQueryRequest.getBlobcol());

        return procedureExecutor.executeNamedProcedure("Procedure_getAllTypesWithAliases_InsertQuery", params, ProcedureGetAllTypesWithAliasesInsertQueryResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureGetByCurrentDateResponse executeProcedure_GetByCurrentDate(Date datecol) {
        Map params = new HashMap(1);

        params.put("datecol", datecol);

        return procedureExecutor.executeNamedProcedure("Procedure_GetByCurrentDate", params, ProcedureGetByCurrentDateResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureGetAllTypesWithAliasesResponse executeProcedure_getAllTypesWithAliases() {
        Map params = new HashMap(0);


        return procedureExecutor.executeNamedProcedure("Procedure_getAllTypesWithAliases", params, ProcedureGetAllTypesWithAliasesResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureGetAllTypesWithAliasesInsertQueryWithSysParamsResponse executeProcedure_getAllTypesWithAliases_InsertQueryWithSysParams(ProcedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest) {
        Map params = new HashMap(13);

        params.put("SHORTCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getShortcol());
        params.put("INTCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getIntcol());
        params.put("LONGCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getLongcol());
        params.put("FLOATCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getFloatcol());
        params.put("DOUBLECOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getDoublecol());
        params.put("BIGDECCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getBigdeccol());
        params.put("BIGINTCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getBigintcol());
        params.put("CHARCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getCharcol());
        params.put("CLOBCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getClobcol());
        params.put("TEXTCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getTextcol());
        params.put("TIMESTAMPCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getTimestampcol());
        params.put("BOOLEANCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getBooleancol());
        params.put("BLOBCOL", procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.getBlobcol());

        return procedureExecutor.executeNamedProcedure("Procedure_getAllTypesWithAliases_InsertQueryWithSysParams", params, ProcedureGetAllTypesWithAliasesInsertQueryWithSysParamsResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Void executeProcedure_InBlob2(ProcedureInBlob2Request procedureInBlob2request) {
        Map params = new HashMap(2);

        params.put("BLOBCOL", procedureInBlob2request.getBlobcol());
        params.put("DESCRIPTION", procedureInBlob2request.getDescription());

        return procedureExecutor.executeNamedProcedure("Procedure_InBlob2", params, Void.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Void executeProcedure_AllBlobsInsert(ProcedureAllBlobsInsertRequest procedureAllBlobsInsertRequest) {
        Map params = new HashMap(6);

        params.put("BLOBTYPE1", procedureAllBlobsInsertRequest.getBlobtype1());
        params.put("BLOBTYPE2", procedureAllBlobsInsertRequest.getBlobtype2());
        params.put("BLOBTYPE3", procedureAllBlobsInsertRequest.getBlobtype3());
        params.put("BLOBTYPE4", procedureAllBlobsInsertRequest.getBlobtype4());
        params.put("BLOBTYPE5", procedureAllBlobsInsertRequest.getBlobtype5());
        params.put("BOOLEANCOL", procedureAllBlobsInsertRequest.getBooleancol());

        return procedureExecutor.executeNamedProcedure("Procedure_AllBlobsInsert", params, Void.class);
    }

}


