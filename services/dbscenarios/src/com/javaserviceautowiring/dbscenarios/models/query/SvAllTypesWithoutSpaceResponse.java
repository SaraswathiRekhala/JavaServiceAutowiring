/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.javaserviceautowiring.dbscenarios.models.query;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Objects;

import org.joda.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.wavemaker.commons.json.serializer.ByteArrayToStringSerializer;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.runtime.data.annotations.ColumnAlias;

public class SvAllTypesWithoutSpaceResponse implements Serializable {


    @ColumnAlias("PKID")
    private Integer pkid;

    @ColumnAlias("BYTECOL")
    private Short bytecol;

    @ColumnAlias("SHORTCOL")
    private Short shortcol;

    @ColumnAlias("INTCOL")
    private Integer intcol;

    @ColumnAlias("FLOATCOL")
    private Double floatcol;

    @ColumnAlias("LONGCOL")
    private Long longcol;

    @ColumnAlias("DOUBLECOL")
    private BigDecimal doublecol;

    @ColumnAlias("BIGINTCOL")
    private Long bigintcol;

    @ColumnAlias("BIGDECCOL")
    private BigDecimal bigdeccol;

    @ColumnAlias("CHARCOL")
    private String charcol;

    @ColumnAlias("STRINGCOL")
    private String stringcol;

    @ColumnAlias("TEXTCOL")
    private String textcol;

    @ColumnAlias("CLOBCOL")
    private String clobcol;

    @ColumnAlias("DATECOL")
    private Date datecol;

    @ColumnAlias("DATETIMECOL")
    private LocalDateTime datetimecol;

    @ColumnAlias("TIMECOL")
    private Time timecol;

    @ColumnAlias("TIMESTAMPCOL")
    private Timestamp timestampcol;

    @ColumnAlias("BOOLEANCOL")
    private Boolean booleancol;

        @JsonView(BlobAsUrlView.class)
    @JsonSerialize(using = ByteArrayToStringSerializer.class)
    @JsonProperty(access = Access.READ_ONLY)
    @ColumnAlias("BLOBCOL")
    private byte[] blobcol;

    public Integer getPkid() {
        return this.pkid;
    }

    public void setPkid(Integer pkid) {
        this.pkid = pkid;
    }

    public Short getBytecol() {
        return this.bytecol;
    }

    public void setBytecol(Short bytecol) {
        this.bytecol = bytecol;
    }

    public Short getShortcol() {
        return this.shortcol;
    }

    public void setShortcol(Short shortcol) {
        this.shortcol = shortcol;
    }

    public Integer getIntcol() {
        return this.intcol;
    }

    public void setIntcol(Integer intcol) {
        this.intcol = intcol;
    }

    public Double getFloatcol() {
        return this.floatcol;
    }

    public void setFloatcol(Double floatcol) {
        this.floatcol = floatcol;
    }

    public Long getLongcol() {
        return this.longcol;
    }

    public void setLongcol(Long longcol) {
        this.longcol = longcol;
    }

    public BigDecimal getDoublecol() {
        return this.doublecol;
    }

    public void setDoublecol(BigDecimal doublecol) {
        this.doublecol = doublecol;
    }

    public Long getBigintcol() {
        return this.bigintcol;
    }

    public void setBigintcol(Long bigintcol) {
        this.bigintcol = bigintcol;
    }

    public BigDecimal getBigdeccol() {
        return this.bigdeccol;
    }

    public void setBigdeccol(BigDecimal bigdeccol) {
        this.bigdeccol = bigdeccol;
    }

    public String getCharcol() {
        return this.charcol;
    }

    public void setCharcol(String charcol) {
        this.charcol = charcol;
    }

    public String getStringcol() {
        return this.stringcol;
    }

    public void setStringcol(String stringcol) {
        this.stringcol = stringcol;
    }

    public String getTextcol() {
        return this.textcol;
    }

    public void setTextcol(String textcol) {
        this.textcol = textcol;
    }

    public String getClobcol() {
        return this.clobcol;
    }

    public void setClobcol(String clobcol) {
        this.clobcol = clobcol;
    }

    public Date getDatecol() {
        return this.datecol;
    }

    public void setDatecol(Date datecol) {
        this.datecol = datecol;
    }

    public LocalDateTime getDatetimecol() {
        return this.datetimecol;
    }

    public void setDatetimecol(LocalDateTime datetimecol) {
        this.datetimecol = datetimecol;
    }

    public Time getTimecol() {
        return this.timecol;
    }

    public void setTimecol(Time timecol) {
        this.timecol = timecol;
    }

    public Timestamp getTimestampcol() {
        return this.timestampcol;
    }

    public void setTimestampcol(Timestamp timestampcol) {
        this.timestampcol = timestampcol;
    }

    public Boolean getBooleancol() {
        return this.booleancol;
    }

    public void setBooleancol(Boolean booleancol) {
        this.booleancol = booleancol;
    }

    public byte[] getBlobcol() {
        return this.blobcol;
    }

    public void setBlobcol(byte[] blobcol) {
        this.blobcol = blobcol;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SvAllTypesWithoutSpaceResponse)) return false;
        final SvAllTypesWithoutSpaceResponse svAllTypesWithoutSpaceResponse = (SvAllTypesWithoutSpaceResponse) o;
        return Objects.equals(getPkid(), svAllTypesWithoutSpaceResponse.getPkid()) &&
                Objects.equals(getBytecol(), svAllTypesWithoutSpaceResponse.getBytecol()) &&
                Objects.equals(getShortcol(), svAllTypesWithoutSpaceResponse.getShortcol()) &&
                Objects.equals(getIntcol(), svAllTypesWithoutSpaceResponse.getIntcol()) &&
                Objects.equals(getFloatcol(), svAllTypesWithoutSpaceResponse.getFloatcol()) &&
                Objects.equals(getLongcol(), svAllTypesWithoutSpaceResponse.getLongcol()) &&
                Objects.equals(getDoublecol(), svAllTypesWithoutSpaceResponse.getDoublecol()) &&
                Objects.equals(getBigintcol(), svAllTypesWithoutSpaceResponse.getBigintcol()) &&
                Objects.equals(getBigdeccol(), svAllTypesWithoutSpaceResponse.getBigdeccol()) &&
                Objects.equals(getCharcol(), svAllTypesWithoutSpaceResponse.getCharcol()) &&
                Objects.equals(getStringcol(), svAllTypesWithoutSpaceResponse.getStringcol()) &&
                Objects.equals(getTextcol(), svAllTypesWithoutSpaceResponse.getTextcol()) &&
                Objects.equals(getClobcol(), svAllTypesWithoutSpaceResponse.getClobcol()) &&
                Objects.equals(getDatecol(), svAllTypesWithoutSpaceResponse.getDatecol()) &&
                Objects.equals(getDatetimecol(), svAllTypesWithoutSpaceResponse.getDatetimecol()) &&
                Objects.equals(getTimecol(), svAllTypesWithoutSpaceResponse.getTimecol()) &&
                Objects.equals(getTimestampcol(), svAllTypesWithoutSpaceResponse.getTimestampcol()) &&
                Objects.equals(getBooleancol(), svAllTypesWithoutSpaceResponse.getBooleancol()) &&
                Objects.equals(getBlobcol(), svAllTypesWithoutSpaceResponse.getBlobcol());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPkid(),
                getBytecol(),
                getShortcol(),
                getIntcol(),
                getFloatcol(),
                getLongcol(),
                getDoublecol(),
                getBigintcol(),
                getBigdeccol(),
                getCharcol(),
                getStringcol(),
                getTextcol(),
                getClobcol(),
                getDatecol(),
                getDatetimecol(),
                getTimecol(),
                getTimestampcol(),
                getBooleancol(),
                getBlobcol());
    }
}
