/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.javaserviceautowiring.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.javaserviceautowiring.dbscenarios.service.DbscenariosProcedureExecutorService;
import com.javaserviceautowiring.dbscenarios.models.procedure.*;

@RestController(value = "Dbscenarios.ProcedureExecutionController")
@RequestMapping("/dbscenarios/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private DbscenariosProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Procedure_AllBlobsInsert", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "All Blobs Insert")
    public Void executeProcedure_AllBlobsInsert(@Valid @RequestPart("wm_data_json") ProcedureAllBlobsInsertRequest procedureAllBlobsInsertRequest, @RequestPart(value = "BLOBTYPE1") MultipartFile blobtype1, @RequestPart(value = "BLOBTYPE2") MultipartFile blobtype2, @RequestPart(value = "BLOBTYPE3") MultipartFile blobtype3, @RequestPart(value = "BLOBTYPE4") MultipartFile blobtype4, @RequestPart(value = "BLOBTYPE5") MultipartFile blobtype5, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_AllBlobsInsert");
        procedureAllBlobsInsertRequest.setBlobtype1(WMMultipartUtils.toByteArray(blobtype1));
        procedureAllBlobsInsertRequest.setBlobtype2(WMMultipartUtils.toByteArray(blobtype2));
        procedureAllBlobsInsertRequest.setBlobtype3(WMMultipartUtils.toByteArray(blobtype3));
        procedureAllBlobsInsertRequest.setBlobtype4(WMMultipartUtils.toByteArray(blobtype4));
        procedureAllBlobsInsertRequest.setBlobtype5(WMMultipartUtils.toByteArray(blobtype5));
        Void _result = procedureService.executeProcedure_AllBlobsInsert(procedureAllBlobsInsertRequest);
        LOGGER.debug("got the result for named procedure: Procedure_AllBlobsInsert, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_InBlob2", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "In Blob2 insert")
    public Void executeProcedure_InBlob2(@Valid @RequestPart("wm_data_json") ProcedureInBlob2Request procedureInBlob2request, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_InBlob2");
        procedureInBlob2request.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        Void _result = procedureService.executeProcedure_InBlob2(procedureInBlob2request);
        LOGGER.debug("got the result for named procedure: Procedure_InBlob2, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_getAllTypesWithAliases_InsertQuery", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getAllTypesWithAliases_InsertQuery")
    public ProcedureGetAllTypesWithAliasesInsertQueryResponse executeProcedure_getAllTypesWithAliases_InsertQuery(@Valid @RequestPart("wm_data_json") ProcedureGetAllTypesWithAliasesInsertQueryRequest procedureGetAllTypesWithAliasesInsertQueryRequest, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_getAllTypesWithAliases_InsertQuery");
        procedureGetAllTypesWithAliasesInsertQueryRequest.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        ProcedureGetAllTypesWithAliasesInsertQueryResponse _result = procedureService.executeProcedure_getAllTypesWithAliases_InsertQuery(procedureGetAllTypesWithAliasesInsertQueryRequest);
        LOGGER.debug("got the result for named procedure: Procedure_getAllTypesWithAliases_InsertQuery, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_SingleBlobInsert", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SingleBlobInsert")
    public Void executeProcedure_SingleBlobInsert(@Valid @RequestPart("wm_data_json") ProcedureSingleBlobInsertRequest procedureSingleBlobInsertRequest, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_SingleBlobInsert");
        procedureSingleBlobInsertRequest.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        Void _result = procedureService.executeProcedure_SingleBlobInsert(procedureSingleBlobInsertRequest);
        LOGGER.debug("got the result for named procedure: Procedure_SingleBlobInsert, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_InsertAndGetQuery", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert & Get Query")
    public ProcedureInsertAndGetQueryResponse executeProcedure_InsertAndGetQuery(@Valid @RequestPart("wm_data_json") ProcedureInsertAndGetQueryRequest procedureInsertAndGetQueryRequest, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_InsertAndGetQuery");
        procedureInsertAndGetQueryRequest.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        ProcedureInsertAndGetQueryResponse _result = procedureService.executeProcedure_InsertAndGetQuery(procedureInsertAndGetQueryRequest);
        LOGGER.debug("got the result for named procedure: Procedure_InsertAndGetQuery, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_GetByCurrentDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetByCurrentDate")
    public ProcedureGetByCurrentDateResponse executeProcedure_GetByCurrentDate(@RequestParam(value = "datecol") Date datecol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_GetByCurrentDate");
        ProcedureGetByCurrentDateResponse _result = procedureService.executeProcedure_GetByCurrentDate(datecol);
        LOGGER.debug("got the result for named procedure: Procedure_GetByCurrentDate, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_getAllTypesWithAliases", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getAllTypesWithAliases response")
    public ProcedureGetAllTypesWithAliasesResponse executeProcedure_getAllTypesWithAliases(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_getAllTypesWithAliases");
        ProcedureGetAllTypesWithAliasesResponse _result = procedureService.executeProcedure_getAllTypesWithAliases();
        LOGGER.debug("got the result for named procedure: Procedure_getAllTypesWithAliases, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_getAllTypesWithAliases_InsertQueryWithSysParams", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getAllTypesWithAliases_InsertQuery With System Params")
    public ProcedureGetAllTypesWithAliasesInsertQueryWithSysParamsResponse executeProcedure_getAllTypesWithAliases_InsertQueryWithSysParams(@Valid @RequestPart("wm_data_json") ProcedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_getAllTypesWithAliases_InsertQueryWithSysParams");
        procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        ProcedureGetAllTypesWithAliasesInsertQueryWithSysParamsResponse _result = procedureService.executeProcedure_getAllTypesWithAliases_InsertQueryWithSysParams(procedureGetAllTypesWithAliasesInsertQueryWithSysParamsRequest);
        LOGGER.debug("got the result for named procedure: Procedure_getAllTypesWithAliases_InsertQueryWithSysParams, result:{}", _result);
        return _result;
    }

}


