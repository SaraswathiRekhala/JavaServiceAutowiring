/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.javaserviceautowiring.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.annotation.JsonView;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.javaserviceautowiring.dbscenarios.service.DbscenariosQueryExecutorService;
import com.javaserviceautowiring.dbscenarios.models.query.*;

@RestController(value = "Dbscenarios.QueryExecutionController")
@RequestMapping("/dbscenarios/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private DbscenariosQueryExecutorService queryService;

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_GetAllTypes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get All Types")
    public Page<SvGetAllTypesResponse> executeSV_GetAllTypes(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetAllTypes");
        Page<SvGetAllTypesResponse> _result = queryService.executeSV_GetAllTypes(pageable);
        LOGGER.debug("got the result for named query: SV_GetAllTypes, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{pkId}/content/{_fieldName_}");
        for(SvGetAllTypesResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("pkId", _content.getPkId());
            _properties.put("_fieldName_", "blobCol");
            if(_content.getBlobCol() != null) {
                _content.setBlobCol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobCol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_GetAllTypes")
    @RequestMapping(value = "/queries/SV_GetAllTypes/{pkId}/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_GetAllTypes(@PathVariable("pkId") Integer pkId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetAllTypes");

        InputStream _result = queryService.getBlobColContentForSV_GetAllTypes(pkId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query SV_GetAllTypes")
    @RequestMapping(value = "/queries/SV_GetAllTypes/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSV_GetAllTypes(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: SV_GetAllTypes");

        return queryService.exportSV_GetAllTypes(exportType, pageable);
    }

    @RequestMapping(value = "/queries/SV_InsertWithBlob", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert With Blob")
    public IntegerWrapper executeSV_InsertWithBlob(@Valid @RequestPart("wm_data_json") SvInsertWithBlobRequest svInsertWithBlobRequest, @RequestPart(value = "BLOBCOL") MultipartFile blobcol, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_InsertWithBlob");
        svInsertWithBlobRequest.setBlobcol(WMMultipartUtils.toByteArray(blobcol));
        Integer _result = queryService.executeSV_InsertWithBlob(svInsertWithBlobRequest);
        LOGGER.debug("got the result for named query: SV_InsertWithBlob, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_GetAllTypesSingle", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetAllTypesSingle")
    public SvGetAllTypesSingleResponse executeSV_GetAllTypesSingle(HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetAllTypesSingle");
        SvGetAllTypesSingleResponse _result = queryService.executeSV_GetAllTypesSingle();
        LOGGER.debug("got the result for named query: SV_GetAllTypesSingle, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/content/{_fieldName_}");
        if(_result.getBlobCol() != null) {
            _result.setBlobCol(_uriBuilder.buildAndExpand(Collections.singletonMap("_fieldName_", "blobCol")).toUriString().getBytes());
        } else {
            _result.setBlobCol(null);
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_GetAllTypesSingle")
    @RequestMapping(value = "/queries/SV_GetAllTypesSingle/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_GetAllTypesSingle(@RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetAllTypesSingle");

        InputStream _result = queryService.getBlobColContentForSV_GetAllTypesSingle();
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_AllTypesWithoutSpace", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AllTypesWithoutSpace")
    public Page<SvAllTypesWithoutSpaceResponse> executeSV_AllTypesWithoutSpace(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AllTypesWithoutSpace");
        Page<SvAllTypesWithoutSpaceResponse> _result = queryService.executeSV_AllTypesWithoutSpace(pageable);
        LOGGER.debug("got the result for named query: SV_AllTypesWithoutSpace, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{pkid}/content/{_fieldName_}");
        for(SvAllTypesWithoutSpaceResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("pkid", _content.getPkid());
            _properties.put("_fieldName_", "blobcol");
            if(_content.getBlobcol() != null) {
                _content.setBlobcol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobcol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobcol in query SV_AllTypesWithoutSpace")
    @RequestMapping(value = "/queries/SV_AllTypesWithoutSpace/{pkid}/content/blobcol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobcolContentForSV_AllTypesWithoutSpace(@PathVariable("pkid") Integer pkid, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AllTypesWithoutSpace");

        InputStream _result = queryService.getBlobcolContentForSV_AllTypesWithoutSpace(pkid);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query SV_AllTypesWithoutSpace")
    @RequestMapping(value = "/queries/SV_AllTypesWithoutSpace/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSV_AllTypesWithoutSpace(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: SV_AllTypesWithoutSpace");

        return queryService.exportSV_AllTypesWithoutSpace(exportType, pageable);
    }

    @RequestMapping(value = "/queries/SV_InsertQuery", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert Query")
    public IntegerWrapper executeSV_InsertQuery(@Valid @RequestBody SvInsertQueryRequest svInsertQueryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_InsertQuery");
        Integer _result = queryService.executeSV_InsertQuery(svInsertQueryRequest);
        LOGGER.debug("got the result for named query: SV_InsertQuery, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_GetLoggedInIdByPkId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetLoggedInIdByPkId")
    public SvGetLoggedInIdByPkIdResponse executeSV_GetLoggedInIdByPkId(HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetLoggedInIdByPkId");
        SvGetLoggedInIdByPkIdResponse _result = queryService.executeSV_GetLoggedInIdByPkId();
        LOGGER.debug("got the result for named query: SV_GetLoggedInIdByPkId, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/content/{_fieldName_}");
        if(_result.getBlobCol() != null) {
            _result.setBlobCol(_uriBuilder.buildAndExpand(Collections.singletonMap("_fieldName_", "blobCol")).toUriString().getBytes());
        } else {
            _result.setBlobCol(null);
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_GetLoggedInIdByPkId")
    @RequestMapping(value = "/queries/SV_GetLoggedInIdByPkId/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_GetLoggedInIdByPkId(@RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetLoggedInIdByPkId");

        InputStream _result = queryService.getBlobColContentForSV_GetLoggedInIdByPkId();
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_GetByLoggedInId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get By IoggedInId")
    public Page<SvGetByLoggedInIdResponse> executeSV_GetByLoggedInId(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetByLoggedInId");
        Page<SvGetByLoggedInIdResponse> _result = queryService.executeSV_GetByLoggedInId(pageable);
        LOGGER.debug("got the result for named query: SV_GetByLoggedInId, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/content/{_fieldName_}");
        for(SvGetByLoggedInIdResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(1);
            _properties.put("_fieldName_", "blobCol");
            if(_content.getBlobCol() != null) {
                _content.setBlobCol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobCol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_GetByLoggedInId")
    @RequestMapping(value = "/queries/SV_GetByLoggedInId/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_GetByLoggedInId(@RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetByLoggedInId");

        InputStream _result = queryService.getBlobColContentForSV_GetByLoggedInId();
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query SV_GetByLoggedInId")
    @RequestMapping(value = "/queries/SV_GetByLoggedInId/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSV_GetByLoggedInId(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: SV_GetByLoggedInId");

        return queryService.exportSV_GetByLoggedInId(exportType, pageable);
    }

}


